package digest

import (
	"fmt"
	"strings"
	"testing"

	"tg-digest-bot/internal/domain"
)

func TestFormatDigestBuildsTopicSections(t *testing.T) {
	digest := domain.Digest{
		Overview: "–î–µ–Ω—å –≤—ã–¥–∞–ª—Å—è –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º–∏.",
		Theses:   []string{"–ò–≥—Ä—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏", "–°–ø–æ—Ä—Ç —É–¥–∏–≤–∏–ª"},
		Items: []domain.DigestItem{
			{
				Post: domain.Post{URL: "https://t.me/example/1"},
				Summary: domain.Summary{
					Headline:     "Battlefield 6 —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Ä–µ–∫–æ—Ä–¥",
					Bullets:      []string{"–°—Ç–∞—Ä—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–Ω–ª–∞–π–Ω–æ–º", "–ò–≥—Ä–æ–∫–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥–∏"},
					Topic:        "–ò–≥—Ä—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
					TopicSummary: "–ì–ª–∞–≤–Ω—ã–µ —Ä–µ–ª–∏–∑—ã –∏ –∞–Ω–æ–Ω—Å—ã –∏–∑ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.",
				},
			},
			{
				Post: domain.Post{URL: "https://t.me/example/2"},
				Summary: domain.Summary{
					Headline: "–î–∞–Ω–∏ –û–ª—å–º–æ –ø–æ–ª—É—á–∏–ª —Ç—Ä–∞–≤–º—É",
					Bullets:  []string{"–ò—Å–ø–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–ª–∞ –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –º–∞—Ç—á–∞–º–∏"},
					Topic:    "–°–ø–æ—Ä—Ç",
				},
			},
		},
	}

	formatted := FormatDigest(digest)

	mustContain(t, formatted, "üß≠ <b>–ò—Ç–æ–≥–∏ –¥–Ω—è</b>")
	mustContain(t, formatted, "üìå <b>–°–∞–º—ã–µ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–∑–∏—Å—ã</b>")
	mustContain(t, formatted, "üóÇ <b>–¢–µ–º—ã –¥–Ω—è</b>")
	mustContain(t, formatted, "<b>–ò–≥—Ä—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</b>")
	mustContain(t, formatted, "–ì–ª–∞–≤–Ω—ã–µ —Ä–µ–ª–∏–∑—ã –∏ –∞–Ω–æ–Ω—Å—ã –∏–∑ –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.")
	mustContain(t, formatted, "<a href=\"https://t.me/example/1\">Battlefield 6 —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ —Ä–µ–∫–æ—Ä–¥</a>")
	mustContain(t, formatted, "‚Ä¢ <a href=\"https://t.me/example/2\">–î–∞–Ω–∏ –û–ª—å–º–æ –ø–æ–ª—É—á–∏–ª —Ç—Ä–∞–≤–º—É</a> ‚Äî –ò—Å–ø–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–ª–∞ –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –º–∞—Ç—á–∞–º–∏")
	mustContain(t, formatted, fmt.Sprintf("<a href=\"%s\">–î–∞–π–¥–∂–µ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é %s</a>", footerLinkURL, footerLinkName))
}

func mustContain(t *testing.T, s, substr string) {
	t.Helper()
	if !strings.Contains(s, substr) {
		t.Fatalf("–æ–∂–∏–¥–∞–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫—É %q –≤ %q", substr, s)
	}
}
