package digest

import (
	"fmt"
	"html"
	"strings"

	"tg-digest-bot/internal/domain"
)

// FormatDigest —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
func FormatDigest(d domain.Digest) string {
	var b strings.Builder
	b.WriteString("üì∞ –î–∞–π–¥–∂–µ—Å—Ç –∑–∞ 24 —á–∞—Å–∞\n\n")
	for i, item := range d.Items {
		title := strings.TrimSpace(item.Summary.Headline)
		if title == "" {
			title = fmt.Sprintf("–ó–∞–ø–∏—Å—å #%d", i+1)
		}
		b.WriteString(fmt.Sprintf("%d. <b>%s</b>\n", i+1, escapeHTML(title)))
		if len(item.Summary.Bullets) > 0 {
			for _, bullet := range item.Summary.Bullets {
				trimmed := strings.TrimSpace(bullet)
				if trimmed == "" {
					continue
				}
				b.WriteString("‚Ä¢ " + escapeHTML(trimmed) + "\n")
			}
		}
		if item.Post.URL != "" {
			b.WriteString(fmt.Sprintf("<a href=\"%s\">–ß–∏—Ç–∞—Ç—å</a>\n", html.EscapeString(item.Post.URL)))
		}
		b.WriteString("\n")
	}
	return strings.TrimSpace(b.String())
}

func escapeHTML(s string) string {
	return html.EscapeString(s)
}
