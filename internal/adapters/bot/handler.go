package bot

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
	"github.com/rs/zerolog"

	"tg-digest-bot/internal/adapters/telegram"
	"tg-digest-bot/internal/domain"
	"tg-digest-bot/internal/infra/metrics"
	billingusecase "tg-digest-bot/internal/usecase/billing"
	"tg-digest-bot/internal/usecase/channels"
	"tg-digest-bot/internal/usecase/schedule"
)

// Handler –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –±–æ—Ç–∞.
type Handler struct {
	bot          *tgbotapi.BotAPI
	log          zerolog.Logger
	channelUC    *channels.Service
	scheduleUC   *schedule.Service
	users        domain.UserRepo
	billing      domain.Billing
	sbp          *billingusecase.Service
	jobs         domain.DigestQueue
	maxDigest    int
	mu           sync.Mutex
	pendingDrop  map[int64]time.Time
	pendingTime  map[int64]struct{}
	sbpNotifyURL string
	offers       map[string]subscriptionOffer
}

// NewHandler —Å–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
func NewHandler(bot *tgbotapi.BotAPI, log zerolog.Logger, channelUC *channels.Service, scheduleUC *schedule.Service, userRepo domain.UserRepo, billing domain.Billing, sbpService *billingusecase.Service, jobs domain.DigestQueue, maxDigest int, sbpNotifyURL string) *Handler {
	return &Handler{
		bot:          bot,
		log:          log,
		channelUC:    channelUC,
		scheduleUC:   scheduleUC,
		users:        userRepo,
		billing:      billing,
		sbp:          sbpService,
		jobs:         jobs,
		maxDigest:    maxDigest,
		pendingDrop:  make(map[int64]time.Time),
		pendingTime:  make(map[int64]struct{}),
		sbpNotifyURL: sbpNotifyURL,
		offers:       defaultSubscriptionOffers(),
	}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∞–ø–¥–µ–π—Ç.
func (h *Handler) HandleUpdate(ctx context.Context, upd tgbotapi.Update) {
	if upd.Message != nil {
		h.handleMessage(ctx, upd.Message)
	} else if upd.CallbackQuery != nil {
		h.handleCallback(ctx, upd.CallbackQuery)
	}
}

func (h *Handler) handleMessage(ctx context.Context, msg *tgbotapi.Message) {
	text := strings.TrimSpace(msg.Text)
	if msg.From != nil && !strings.HasPrefix(text, "/") {
		if h.tryHandleScheduleInput(ctx, msg.Chat.ID, msg.From.ID, text) {
			return
		}
	}
	switch {
	case strings.HasPrefix(text, "/start"):
		h.handleStart(ctx, msg)
	case strings.HasPrefix(text, "/help"):
		h.handleHelp(msg.Chat.ID)
	case strings.HasPrefix(text, "/balance"):
		if msg.From == nil {
			h.reply(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
			return
		}
		h.handleBalance(ctx, msg.Chat.ID, msg.From.ID)
	case strings.HasPrefix(text, "/deposit"):
		if msg.From == nil {
			h.reply(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
			return
		}
		amount := strings.TrimSpace(strings.TrimPrefix(text, "/deposit"))
		h.handleDeposit(ctx, msg.Chat.ID, msg.From.ID, amount)
	case strings.HasPrefix(text, "/buy"):
		if msg.From == nil {
			h.reply(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
			return
		}
		plan := strings.TrimSpace(strings.TrimPrefix(text, "/buy"))
		h.handleBuySubscription(ctx, msg.Chat.ID, msg.From.ID, plan)
	case strings.HasPrefix(text, "/add"):
		alias := strings.TrimSpace(strings.TrimPrefix(text, "/add"))
		h.handleAdd(ctx, msg.Chat.ID, msg.From.ID, alias)
	case strings.HasPrefix(text, "/list"):
		h.handleList(ctx, msg.Chat.ID, msg.From.ID)
	case strings.HasPrefix(text, "/digest_now"):
		h.handleDigestNow(ctx, msg.Chat.ID, msg.From.ID)
	case strings.HasPrefix(text, "/schedule"):
		if msg.From == nil {
			h.reply(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
			return
		}
		payload := strings.TrimSpace(strings.TrimPrefix(text, "/schedule"))
		if payload == "" {
			h.handleSchedule(msg.Chat.ID, msg.From.ID)
			return
		}
		h.handleSetTime(ctx, msg.Chat.ID, msg.From.ID, payload)
	case strings.HasPrefix(text, "/tags"):
		h.handleTagsList(ctx, msg.Chat.ID, msg.From.ID)
	case strings.HasPrefix(text, "/tag"):
		payload := strings.TrimSpace(strings.TrimPrefix(text, "/tag"))
		h.handleTagCommand(ctx, msg.Chat.ID, msg.From.ID, payload)
	case strings.HasPrefix(text, "/digest_tag"):
		payload := strings.TrimSpace(strings.TrimPrefix(text, "/digest_tag"))
		h.handleDigestByTags(ctx, msg.Chat.ID, msg.From.ID, payload)
	case strings.HasPrefix(text, "/mute"):
		alias := strings.TrimSpace(strings.TrimPrefix(text, "/mute"))
		h.handleMuteCommand(ctx, msg.Chat.ID, msg.From.ID, alias, true)
	case strings.HasPrefix(text, "/unmute"):
		alias := strings.TrimSpace(strings.TrimPrefix(text, "/unmute"))
		h.handleMuteCommand(ctx, msg.Chat.ID, msg.From.ID, alias, false)
	case strings.HasPrefix(text, "/clear_data"):
		h.handleClearRequest(msg.Chat.ID, msg.From.ID)
	case strings.HasPrefix(text, "/clear_data_confirm"):
		h.handleClearConfirm(ctx, msg.Chat.ID, msg.From.ID)
	default:
		h.reply(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help", nil)
	}
}

func (h *Handler) handleStart(ctx context.Context, msg *tgbotapi.Message) {
	if msg.From == nil {
		h.reply(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
		return
	}
	locale := msg.From.LanguageCode
	user, created, err := h.users.UpsertByTGID(msg.From.ID, locale, "")
	if err != nil {
		h.reply(msg.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v", err), nil)
		return
	}
	payload := ""
	if msg.Text != "" {
		fields := strings.Fields(msg.Text)
		if len(fields) > 1 {
			payload = fields[1]
		}
	}
	var referralResult domain.ReferralResult
	if payload != "" && (created || user.ReferredByID == nil) {
		result, applyErr := h.users.ApplyReferral(payload, user.ID)
		if applyErr != nil {
			h.log.Error().Err(applyErr).Int64("user", msg.From.ID).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
		} else {
			user = result.User
			referralResult = result
		}
	}

	sections := h.buildStartSections(user)
	for i, section := range sections {
		if strings.TrimSpace(section) == "" {
			continue
		}
		if i == 0 {
			h.reply(msg.Chat.ID, section, h.mainKeyboard())
			continue
		}
		h.reply(msg.Chat.ID, section, nil)
	}

	if referralResult.ReferrerUpgraded && referralResult.Referrer != nil {
		h.notifyPlanUpgrade(*referralResult.Referrer, referralResult.PreviousRole)
	}
}

func (h *Handler) handleHelp(chatID int64) {
	h.reply(chatID, h.buildHelpMessage(), h.mainKeyboard())
}

func (h *Handler) handleBalance(ctx context.Context, chatID, tgUserID int64) {
	if tgUserID == 0 {
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
		return
	}
	if h.billing == nil {
		h.reply(chatID, "–ë–∏–ª–ª–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	account, err := h.billing.EnsureAccount(ctx, user.ID)
	if err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("billing: ensure account failed")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	balanceText := formatMoney(account.Balance.Amount, account.Balance.Currency)
	lines := []string{
		"üí≥ –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞:",
		fmt.Sprintf("‚Ä¢ %s", balanceText),
		"",
		"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ–π /deposit 500 –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
	}
	h.reply(chatID, strings.Join(lines, "\n"), h.balanceKeyboard())
}

func (h *Handler) handleDeposit(ctx context.Context, chatID, tgUserID int64, payload string) {
	if tgUserID == 0 {
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
		return
	}
	if h.billing == nil || h.sbp == nil {
		h.reply(chatID, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	amountText := strings.TrimSpace(payload)
	if amountText == "" {
		h.sendTopUpMenu(chatID)
		return
	}
	amountMinor, err := parseAmountToMinor(amountText)
	if err != nil || amountMinor <= 0 {
		h.reply(chatID, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä /deposit 500 –∏–ª–∏ /deposit 249.99", h.topUpPresetKeyboard())
		return
	}
	if amountMinor < 100 {
		h.reply(chatID, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 1 ‚ÇΩ.", h.topUpPresetKeyboard())
		return
	}
	account, err := h.billing.EnsureAccount(ctx, user.ID)
	if err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("billing: ensure account failed")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	currency := account.Balance.Currency
	if currency == "" {
		currency = "RUB"
	}
	description := fmt.Sprintf("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ TG Digest Bot –Ω–∞ %s", formatMoney(amountMinor, currency))
	idempotencyKey := uuid.NewString()
	metadata := map[string]any{
		"type":        "topup",
		"source":      "telegram_bot",
		"user_id":     user.ID,
		"tg_user_id":  tgUserID,
		"description": description,
	}
	params := billingusecase.CreateSBPInvoiceParams{
		UserID:         user.ID,
		Amount:         domain.Money{Amount: amountMinor, Currency: currency},
		Description:    description,
		PaymentPurpose: fmt.Sprintf("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TG Digest Bot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", user.ID),
		IdempotencyKey: idempotencyKey,
		Metadata:       metadata,
		Extra: map[string]any{
			"user_id":    user.ID,
			"tg_user_id": tgUserID,
			"source":     "telegram_bot",
		},
	}
	if h.sbpNotifyURL != "" {
		params.NotificationURL = h.sbpNotifyURL
	}
	result, err := h.sbp.CreateInvoiceWithQRCode(ctx, params)
	if err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("billing: create sbp invoice failed")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	amountFmt := formatMoney(result.Invoice.Amount.Amount, result.Invoice.Amount.Currency)
	lines := []string{
		"üßæ –°—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω.",
		fmt.Sprintf("–°—É–º–º–∞: %s.", amountFmt),
	}
	if result.QR.PaymentLink != "" {
		lines = append(lines, fmt.Sprintf("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: %s", result.QR.PaymentLink))
	}
	if result.QR.ExpiresAt != nil {
		lines = append(lines, fmt.Sprintf("–°—á—ë—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ %s.", result.QR.ExpiresAt.Local().Format("02.01.2006 15:04")))
	}
	lines = append(lines,
		"",
		"–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥.",
	)
	h.reply(chatID, strings.Join(lines, "\n"), h.topUpInvoiceKeyboard(result.QR.PaymentLink))
}

func (h *Handler) handleBuySubscription(ctx context.Context, chatID, tgUserID int64, payload string) {
	if tgUserID == 0 {
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", nil)
		return
	}
	if h.billing == nil {
		h.reply(chatID, "–ë–∏–ª–ª–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	planKey := strings.ToLower(strings.TrimSpace(payload))
	if planKey == "" {
		h.sendSubscriptionMenu(chatID, user)
		return
	}
	offer, ok := h.offers[planKey]
	if !ok {
		h.reply(chatID, "–£–∫–∞–∂–∏—Ç–µ —Ç–∞—Ä–∏—Ñ: /buy plus –∏–ª–∏ /buy pro.", h.subscriptionKeyboard(user))
		return
	}
	if planPriority(user.Role) >= planPriority(offer.Role) {
		h.reply(chatID, fmt.Sprintf("–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞—Ä–∏—Ñ %s –∏–ª–∏ –≤—ã—à–µ.", domain.PlanForRole(user.Role).Name), h.subscriptionKeyboard(user))
		return
	}
	account, err := h.billing.EnsureAccount(ctx, user.ID)
	if err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("billing: ensure account failed")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return
	}
	currency := account.Balance.Currency
	if currency == "" {
		currency = "RUB"
	}
	if account.Balance.Amount < offer.PriceMinor {
		shortage := offer.PriceMinor - account.Balance.Amount
		lines := []string{
			"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.",
			fmt.Sprintf("–ù—É–∂–Ω–æ –µ—â—ë %s.", formatMoney(shortage, currency)),
		}
		h.reply(chatID, strings.Join(lines, "\n"), h.topUpPresetKeyboard())
		return
	}
	metadata := map[string]any{
		"type":       "subscription_charge",
		"plan":       offer.Key,
		"plan_name":  offer.Title,
		"user_id":    user.ID,
		"tg_user_id": tgUserID,
		"duration":   offer.Duration,
	}
	description := fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ %s", offer.Title)
	payment, err := h.billing.ChargeAccount(ctx, domain.ChargeAccountParams{
		AccountID:      account.ID,
		Amount:         domain.Money{Amount: offer.PriceMinor, Currency: currency},
		Description:    description,
		Metadata:       metadata,
		IdempotencyKey: uuid.NewString(),
	})
	if err != nil {
		if errors.Is(err, domain.ErrInsufficientFunds) {
			h.reply(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ–π /deposit 500.", h.topUpPresetKeyboard())
			return
		}
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("billing: charge account failed")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", nil)
		return
	}
	if err := h.users.UpdateRole(user.ID, offer.Role); err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("billing: update role failed")
		h.reply(chatID, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º.", nil)
		return
	}
	user.Role = offer.Role
	plan := user.Plan()
	channelLine, manualLine := h.mainPlanLines(plan)
	balance, balErr := h.billing.GetAccountByUserID(ctx, user.ID)
	if balErr != nil {
		h.log.Error().Err(balErr).Int64("user", tgUserID).Msg("billing: get balance after charge")
	}
	lines := []string{
		fmt.Sprintf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", offer.Title),
		fmt.Sprintf("–°–ø–∏—Å–∞–Ω–æ: %s (–ø–ª–∞—Ç—ë–∂ #%d).", formatMoney(offer.PriceMinor, currency), payment.ID),
		fmt.Sprintf("–î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤—É–µ—Ç: %s.", offer.Duration),
		"",
		"–ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:",
		fmt.Sprintf("‚Ä¢ %s", channelLine),
		fmt.Sprintf("‚Ä¢ %s", manualLine),
	}
	if balErr == nil {
		lines = append(lines, "", fmt.Sprintf("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %s.", formatMoney(balance.Balance.Amount, balance.Balance.Currency)))
	}
	lines = append(lines, "", "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç!")
	h.reply(chatID, strings.Join(lines, "\n"), h.balanceKeyboard())
}

func (h *Handler) sendTopUpMenu(chatID int64) {
	lines := []string{
		"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:",
		"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /deposit 500 –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ 500 ‚ÇΩ.",
		"–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ø–µ–π–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä /deposit 249.99.",
	}
	h.reply(chatID, strings.Join(lines, "\n"), h.topUpPresetKeyboard())
}

func (h *Handler) sendSubscriptionMenu(chatID int64, user domain.User) {
	offers := h.subscriptionOffersOrdered()
	if len(offers) == 0 {
		h.reply(chatID, "–ü–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", nil)
		return
	}
	var lines []string
	lines = append(lines, "üõí –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
	available := 0
	for _, offer := range offers {
		if planPriority(user.Role) >= planPriority(offer.Role) {
			continue
		}
		available++
		price := formatMoney(offer.PriceMinor, "RUB")
		lines = append(lines,
			"",
			fmt.Sprintf("‚Ä¢ %s ‚Äî %s (%s)", offer.Title, price, offer.Duration),
		)
		for _, bullet := range offer.Bullets {
			lines = append(lines, fmt.Sprintf("   ‚ó¶ %s", bullet))
		}
		lines = append(lines, fmt.Sprintf("   –ö–æ–º–∞–Ω–¥–∞: /buy %s", offer.Key))
	}
	if available == 0 {
		lines = append(lines, "", "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç!")
		h.reply(chatID, strings.Join(lines, "\n"), nil)
		return
	}
	lines = append(lines,
		"",
		"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥–æ–π /deposit —Å—É–º–º–∞.",
	)
	h.reply(chatID, strings.Join(lines, "\n"), h.subscriptionKeyboard(user))
}

func (h *Handler) handleAdd(ctx context.Context, chatID int64, tgUserID int64, alias string) {
	if alias == "" {
		h.reply(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /add @alias", nil)
		return
	}
	channel, err := h.channelUC.AddChannel(ctx, tgUserID, alias)
	if err != nil {
		switch {
		case errors.Is(err, channels.ErrAliasInvalid):
			h.reply(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–ª–∏–∞—Å. –ü—Ä–∏–º–µ—Ä: /add @example", nil)
		case errors.Is(err, channels.ErrChannelLimit):
			user, getErr := h.users.GetByTGID(tgUserID)
			if getErr != nil {
				h.reply(chatID, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.", nil)
				return
			}
			plan := user.Plan()
			if plan.ChannelLimit > 0 {
				h.reply(chatID, fmt.Sprintf("–¢–∞—Ä–∏—Ñ %s –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ %d –∫–∞–Ω–∞–ª–æ–≤. –£–¥–∞–ª–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.", plan.Name, plan.ChannelLimit), nil)
			} else {
				h.reply(chatID, "–î–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
			}
		case errors.Is(err, channels.ErrPrivateChannel):
			h.reply(chatID, "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª.", nil)
		default:
			h.reply(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: %v", err), nil)
		}
		return
	}
	title := channel.Title
	if title == "" {
		title = channel.Alias
	}
	h.reply(chatID, fmt.Sprintf("–ì–æ—Ç–æ–≤–æ: %s", title), h.mainKeyboard())
}

func (h *Handler) handleList(ctx context.Context, chatID int64, tgUserID int64) {
	channels, err := h.channelUC.ListChannels(ctx, tgUserID, 10, 0)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err), nil)
		return
	}
	if len(channels) == 0 {
		h.reply(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤", nil)
		return
	}
	var b strings.Builder
	for i, ch := range channels {
		title := ch.Channel.Title
		if title == "" {
			title = ch.Channel.Alias
		}
		line := fmt.Sprintf("%d. %s (@%s)", i+1, title, ch.Channel.Alias)
		if len(ch.Tags) > 0 {
			line += fmt.Sprintf(" ‚Äî —Ç–µ–≥–∏: %s", strings.Join(ch.Tags, ", "))
		}
		b.WriteString(line + "\n")
	}
	keyboard := make([][]tgbotapi.InlineKeyboardButton, 0, len(channels))
	for _, ch := range channels {
		action := "mute"
		label := "üîï –ú—å—é—Ç"
		if ch.Muted {
			action = "unmute"
			label = "üîî –í–∫–ª"
		}
		toggle := tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("%s:%d", action, ch.ChannelID))
		del := tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete:%d", ch.ChannelID))
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(toggle, del))
	}
	markup := tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	h.reply(chatID, b.String(), &markup)
}

func (h *Handler) handleDigestNow(ctx context.Context, chatID int64, tgUserID int64) {
	channels, err := h.channelUC.ListChannels(ctx, tgUserID, 100, 0)
	if err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", nil)
		return
	}
	if len(channels) == 0 {
		h.reply(chatID, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /add", nil)
		return
	}

	rows := make([][]tgbotapi.InlineKeyboardButton, 0, len(channels)+1)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üì∞ –í—Å–µ –∫–∞–Ω–∞–ª—ã", "digest_all"),
	))
	for _, ch := range channels {
		title := ch.Channel.Title
		if title == "" {
			title = ch.Channel.Alias
		}
		button := tgbotapi.NewInlineKeyboardButtonData(title, fmt.Sprintf("digest_channel:%d", ch.ChannelID))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}

	tagCounters := make(map[string]int)
	for _, ch := range channels {
		for _, tag := range ch.Tags {
			trimmed := strings.TrimSpace(tag)
			if trimmed == "" {
				continue
			}
			tagCounters[trimmed]++
		}
	}
	if len(tagCounters) > 0 {
		tags := make([]string, 0, len(tagCounters))
		for tag := range tagCounters {
			tags = append(tags, tag)
		}
		sort.Strings(tags)
		for _, tag := range tags {
			encoded := url.QueryEscape(tag)
			label := fmt.Sprintf("üè∑ %s (%d)", tag, tagCounters[tag])
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(label, fmt.Sprintf("digest_tag:%s", encoded)),
			))
		}
	}

	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	h.reply(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", &markup)
}

func (h *Handler) handleTagCommand(ctx context.Context, chatID, tgUserID int64, payload string) {
	if payload == "" {
		h.reply(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /tag @alias –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", nil)
		return
	}
	parts := strings.SplitN(payload, " ", 2)
	aliasInput := strings.TrimSpace(parts[0])
	if aliasInput == "" {
		h.reply(chatID, "–£–∫–∞–∂–∏—Ç–µ –∞–ª–∏–∞—Å –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã", nil)
		return
	}
	parsed, err := channels.ParseAlias(aliasInput)
	if err != nil {
		h.reply(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–ª–∏–∞—Å", nil)
		return
	}
	var rawTags string
	if len(parts) > 1 {
		rawTags = parts[1]
	}
	tags := parseTagsInput(rawTags)

	list, err := h.channelUC.ListChannels(ctx, tgUserID, 100, 0)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: %v", err), nil)
		return
	}
	var (
		channelID int64
		title     string
	)
	for _, ch := range list {
		if strings.EqualFold(ch.Channel.Alias, parsed) {
			channelID = ch.ChannelID
			title = ch.Channel.Title
			if title == "" {
				title = ch.Channel.Alias
			}
			break
		}
	}
	if channelID == 0 {
		h.reply(chatID, "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫", nil)
		return
	}
	if err := h.channelUC.UpdateChannelTags(ctx, tgUserID, channelID, tags); err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–≥–∏: %v", err), nil)
		return
	}
	if len(tags) == 0 {
		h.reply(chatID, fmt.Sprintf("–¢–µ–≥–∏ –¥–ª—è %s –æ—á–∏—â–µ–Ω—ã", title), nil)
		return
	}
	h.reply(chatID, fmt.Sprintf("–¢–µ–≥–∏ –¥–ª—è %s –æ–±–Ω–æ–≤–ª–µ–Ω—ã: %s", title, strings.Join(tags, ", ")), nil)
}

func (h *Handler) handleTagsList(ctx context.Context, chatID, tgUserID int64) {
	channelsList, err := h.channelUC.ListChannels(ctx, tgUserID, 100, 0)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã: %v", err), nil)
		return
	}
	if len(channelsList) == 0 {
		h.reply(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤", nil)
		return
	}
	counter := make(map[string]int)
	for _, uc := range channelsList {
		for _, tag := range uc.Tags {
			trimmed := strings.TrimSpace(tag)
			if trimmed == "" {
				continue
			}
			counter[trimmed]++
		}
	}
	if len(counter) == 0 {
		h.reply(chatID, "–£ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–≥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /tag", nil)
		return
	}
	tags := make([]string, 0, len(counter))
	for tag := range counter {
		tags = append(tags, tag)
	}
	sort.Strings(tags)
	var b strings.Builder
	b.WriteString("–í–∞—à–∏ —Ç–µ–≥–∏:\n")
	for _, tag := range tags {
		b.WriteString(fmt.Sprintf("- %s ‚Äî %d –∫–∞–Ω–∞–ª(–∞)\n", tag, counter[tag]))
	}
	b.WriteString("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /digest_tag —Ç–µ–≥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç.")
	h.reply(chatID, b.String(), nil)
}

func (h *Handler) handleDigestByTags(ctx context.Context, chatID, tgUserID int64, payload string) {
	tags := parseTagsInput(payload)
	if len(tags) == 0 {
		h.reply(chatID, "–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã", nil)
		return
	}
	channelsList, err := h.channelUC.ListChannels(ctx, tgUserID, 100, 0)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã: %v", err), nil)
		return
	}
	if len(channelsList) == 0 {
		h.reply(chatID, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª", nil)
		return
	}
	if !userHasTags(channelsList, tags) {
		h.reply(chatID, "–°—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç —Ç–∞–∫–∏—Ö —Ç–µ–≥–æ–≤", nil)
		return
	}
	h.enqueueDigestByTags(ctx, chatID, tgUserID, tags)
}

func (h *Handler) handleCallback(ctx context.Context, cb *tgbotapi.CallbackQuery) {
	data := cb.Data
	switch {
	case data == "add_channel":
		h.reply(cb.Message.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /add @alias", nil)
	case data == "help_menu":
		h.reply(cb.Message.Chat.ID, h.buildHelpMessage(), h.mainKeyboard())
	case data == "plan_info":
		h.sendPlanInfo(cb.Message.Chat.ID, cb.From.ID)
	case data == "referral_info":
		h.sendReferralInfo(cb.Message.Chat.ID, cb.From.ID)
	case data == "billing_balance":
		h.handleBalance(ctx, cb.Message.Chat.ID, cb.From.ID)
	case data == "billing_topup":
		h.handleDeposit(ctx, cb.Message.Chat.ID, cb.From.ID, "")
	case strings.HasPrefix(data, "billing_topup:"):
		amount := strings.TrimPrefix(data, "billing_topup:")
		h.handleDeposit(ctx, cb.Message.Chat.ID, cb.From.ID, amount)
	case data == "billing_subscribe":
		h.handleBuySubscription(ctx, cb.Message.Chat.ID, cb.From.ID, "")
	case strings.HasPrefix(data, "plan_buy:"):
		planKey := strings.TrimPrefix(data, "plan_buy:")
		h.handleBuySubscription(ctx, cb.Message.Chat.ID, cb.From.ID, planKey)
	case data == "digest_now":
		h.handleDigestNow(ctx, cb.Message.Chat.ID, cb.From.ID)
	case data == "digest_all":
		h.enqueueDigest(ctx, cb.Message.Chat.ID, cb.From.ID, 0)
	case strings.HasPrefix(data, "digest_channel:"):
		id := parseID(data)
		h.enqueueDigest(ctx, cb.Message.Chat.ID, cb.From.ID, id)
	case data == "digest_tag_menu":
		h.reply(cb.Message.Chat.ID, h.buildTagDigestHint(), nil)
	case strings.HasPrefix(data, "digest_tag:"):
		encoded := strings.TrimPrefix(data, "digest_tag:")
		tag, err := url.QueryUnescape(encoded)
		if err != nil {
			h.reply(cb.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–≥", nil)
			return
		}
		h.enqueueDigestByTags(ctx, cb.Message.Chat.ID, cb.From.ID, []string{tag})
	case data == "my_channels":
		h.handleList(ctx, cb.Message.Chat.ID, cb.From.ID)
	case data == "tags_list":
		h.handleTagsList(ctx, cb.Message.Chat.ID, cb.From.ID)
	case data == "set_time":
		h.handleSchedule(cb.Message.Chat.ID, cb.From.ID)
	case strings.HasPrefix(data, "set_time:"):
		value := strings.TrimPrefix(data, "set_time:")
		h.handleSetTime(ctx, cb.Message.Chat.ID, cb.From.ID, value)
	case strings.HasPrefix(data, "mute:"):
		id := parseID(data)
		h.toggleMute(ctx, cb.Message.Chat.ID, cb.From.ID, id, true)
	case strings.HasPrefix(data, "unmute:"):
		id := parseID(data)
		h.toggleMute(ctx, cb.Message.Chat.ID, cb.From.ID, id, false)
	case strings.HasPrefix(data, "delete:"):
		id := parseID(data)
		h.handleDeleteChannel(ctx, cb.Message.Chat.ID, cb.From.ID, id)
	case data == "more_items":
		h.reply(cb.Message.Chat.ID, fmt.Sprintf("–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–∑–∂–µ.", h.maxDigest), nil)
	}
	start := time.Now()
	_, err := h.bot.Request(tgbotapi.NewCallback(cb.ID, ""))
	metrics.ObserveNetworkRequest("telegram_bot", "answer_callback", strconv.FormatInt(cb.From.ID, 10), start, err)
	if err != nil {
		h.log.Error().Err(err).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback")
	}
}

func (h *Handler) handleSchedule(chatID, tgUserID int64) {
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	h.setPendingSchedule(tgUserID)
	current := user.DailyTime.Format("15:04")
	tzSuffix := ""
	if user.Timezone != "" {
		tzSuffix = fmt.Sprintf(" (%s)", user.Timezone)
	}
	message := []string{
		fmt.Sprintf("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: %s%s.", current, tzSuffix),
		"",
		"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è.",
		"–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 21:30 –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /schedule 21:30.",
		"–§–æ—Ä–º–∞—Ç ‚Äî –ß–ß:–ú–ú, 24-—á–∞—Å–æ–≤–æ–π.",
	}
	h.reply(chatID, strings.Join(message, "\n"), SchedulePresetKeyboard())
}

func (h *Handler) handleSetTime(ctx context.Context, chatID, tgUserID int64, value string) {
	value = strings.TrimSpace(value)
	tm, err := ParseLocalTime(value)
	if err != nil {
		h.reply(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú", nil)
		return
	}
	if err := h.scheduleUC.UpdateDailyTime(ctx, tgUserID, tm); err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è: %v", err), nil)
		return
	}
	h.clearPendingSchedule(tgUserID)
	h.reply(chatID, fmt.Sprintf("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %s –ø–æ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏", tm.Format("15:04")), nil)
}

func (h *Handler) tryHandleScheduleInput(ctx context.Context, chatID, tgUserID int64, value string) bool {
	h.mu.Lock()
	_, pending := h.pendingTime[tgUserID]
	h.mu.Unlock()
	if !pending {
		return false
	}
	if strings.TrimSpace(value) == "" {
		h.reply(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 21:30", nil)
		return true
	}
	h.handleSetTime(ctx, chatID, tgUserID, value)
	return true
}

func (h *Handler) setPendingSchedule(tgUserID int64) {
	h.mu.Lock()
	h.pendingTime[tgUserID] = struct{}{}
	h.mu.Unlock()
}

func (h *Handler) clearPendingSchedule(tgUserID int64) {
	h.mu.Lock()
	delete(h.pendingTime, tgUserID)
	h.mu.Unlock()
}

func (h *Handler) handleMuteCommand(ctx context.Context, chatID, tgUserID int64, alias string, mute bool) {
	if alias == "" {
		h.reply(chatID, "–£–∫–∞–∂–∏—Ç–µ –∞–ª–∏–∞—Å –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /mute @example", nil)
		return
	}
	parsed, err := channels.ParseAlias(alias)
	if err != nil {
		h.reply(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–ª–∏–∞—Å", nil)
		return
	}
	channelsList, err := h.channelUC.ListChannels(ctx, tgUserID, 100, 0)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: %v", err), nil)
		return
	}
	var channelID int64
	for _, ch := range channelsList {
		if strings.EqualFold(ch.Channel.Alias, parsed) {
			channelID = ch.ChannelID
			break
		}
	}
	if channelID == 0 {
		h.reply(chatID, "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫", nil)
		return
	}
	h.toggleMute(ctx, chatID, tgUserID, channelID, mute)
}

func (h *Handler) toggleMute(ctx context.Context, chatID, tgUserID, channelID int64, mute bool) {
	if channelID == 0 {
		h.reply(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞", nil)
		return
	}
	if err := h.channelUC.ToggleMute(ctx, tgUserID, channelID, mute); err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: %v", err), nil)
		return
	}
	if mute {
		h.reply(chatID, "–ö–∞–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ", nil)
	} else {
		h.reply(chatID, "–ö–∞–Ω–∞–ª —Å–Ω–æ–≤–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–π–¥–∂–µ—Å—Ç–µ", nil)
	}
}

func (h *Handler) handleDeleteChannel(ctx context.Context, chatID, tgUserID, channelID int64) {
	if channelID == 0 {
		h.reply(chatID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", nil)
		return
	}
	if err := h.channelUC.RemoveChannel(ctx, tgUserID, channelID); err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: %v", err), nil)
		return
	}
	h.reply(chatID, "–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω", nil)
}

func (h *Handler) reserveManualRequest(chatID int64, user domain.User) (domain.ManualRequestState, bool) {
	state, err := h.users.ReserveManualRequest(user.ID, time.Now().UTC())
	if err != nil {
		h.log.Error().Err(err).Int64("user", user.TGUserID).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", nil)
		return domain.ManualRequestState{}, false
	}
	if !state.Allowed {
		h.replyManualLimit(chatID, state)
		return state, false
	}
	return state, true
}

func (h *Handler) replyManualLimit(chatID int64, state domain.ManualRequestState) {
	var lines []string
	lines = append(lines, fmt.Sprintf("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ %s.", state.Plan.Name))
	switch {
	case state.Plan.ManualDailyLimit <= 0:
		lines = append(lines, "–õ–∏–º–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
	case state.Plan.Role == domain.UserRoleFree && state.Plan.ManualIntroTotal > 0:
		lines = append(lines, fmt.Sprintf("–ü–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö %d –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω %d –∑–∞–ø—Ä–æ—Å –≤ —Å—É—Ç–∫–∏.", state.Plan.ManualIntroTotal, state.Plan.ManualDailyLimit))
		lines = append(lines, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")
	default:
		lines = append(lines, fmt.Sprintf("–õ–∏–º–∏—Ç ‚Äî %d –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.", state.Plan.ManualDailyLimit))
	}
	h.reply(chatID, strings.Join(lines, "\n"), nil)
}

func (h *Handler) enqueueDigest(ctx context.Context, chatID, tgUserID, channelID int64) {
	var channelName string
	if channelID > 0 {
		channels, err := h.channelUC.ListChannels(ctx, tgUserID, 100, 0)
		if err != nil {
			h.log.Error().Err(err).Int64("user", tgUserID).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", nil)
			return
		}
		for _, ch := range channels {
			if ch.ChannelID == channelID {
				channelName = ch.Channel.Title
				if channelName == "" {
					channelName = ch.Channel.Alias
				}
				break
			}
		}
		if channelName == "" {
			h.reply(chatID, "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫", nil)
			return
		}
	}

	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	if _, ok := h.reserveManualRequest(chatID, user); !ok {
		return
	}

	now := time.Now().UTC()
	job := domain.DigestJob{
		UserTGID:    tgUserID,
		ChatID:      chatID,
		ChannelID:   channelID,
		Date:        now,
		RequestedAt: now,
		Cause:       domain.DigestCauseManual,
	}

	if err := h.jobs.Enqueue(ctx, job); err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Int64("channel", channelID).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–∞–π–¥–∂–µ—Å—Ç–∞")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", nil)
		return
	}

	metrics.IncDigestOverall()
	metrics.IncDigestForUser(tgUserID)
	if channelID > 0 {
		metrics.IncDigestForChannel(channelID)
	}

	if channelID > 0 {
		h.reply(chatID, fmt.Sprintf("–°–æ–±–∏—Ä–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –∫–∞–Ω–∞–ª—É %s, –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", channelName), nil)
		return
	}

	h.reply(chatID, "–°–æ–±–∏—Ä–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º, –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", nil)
}

func (h *Handler) enqueueDigestByTags(ctx context.Context, chatID, tgUserID int64, tags []string) {
	cleaned := channels.NormalizeTags(tags)
	if len(cleaned) == 0 {
		h.reply(chatID, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞", nil)
		return
	}
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	if _, ok := h.reserveManualRequest(chatID, user); !ok {
		return
	}
	now := time.Now().UTC()
	job := domain.DigestJob{
		UserTGID:    tgUserID,
		ChatID:      chatID,
		Tags:        cleaned,
		Date:        now,
		RequestedAt: now,
		Cause:       domain.DigestCauseManual,
	}
	if err := h.jobs.Enqueue(ctx, job); err != nil {
		h.log.Error().Err(err).Int64("user", tgUserID).Strs("tags", cleaned).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–∞–π–¥–∂–µ—Å—Ç–∞")
		h.reply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", nil)
		return
	}
	metrics.IncDigestOverall()
	metrics.IncDigestForUser(tgUserID)
	h.reply(chatID, fmt.Sprintf("–°–æ–±–∏—Ä–∞–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–≥–∞–º: %s", strings.Join(cleaned, ", ")), nil)
}

func parseTagsInput(input string) []string {
	trimmed := strings.TrimSpace(input)
	if trimmed == "" {
		return nil
	}
	parts := strings.FieldsFunc(trimmed, func(r rune) bool {
		switch r {
		case ',', ';', '\n':
			return true
		default:
			return false
		}
	})
	tags := make([]string, 0, len(parts))
	for _, part := range parts {
		tag := strings.TrimSpace(part)
		if tag == "" {
			continue
		}
		tags = append(tags, tag)
	}
	return channels.NormalizeTags(tags)
}

func userHasTags(channelsList []domain.UserChannel, tags []string) bool {
	if len(tags) == 0 {
		return false
	}
	lookup := make(map[string]struct{}, len(tags))
	for _, tag := range tags {
		lookup[strings.ToLower(strings.TrimSpace(tag))] = struct{}{}
	}
	for _, ch := range channelsList {
		for _, tag := range ch.Tags {
			trimmed := strings.TrimSpace(tag)
			if trimmed == "" {
				continue
			}
			if _, ok := lookup[strings.ToLower(trimmed)]; ok {
				return true
			}
		}
	}
	return false
}

func (h *Handler) subscriptionOffersOrdered() []subscriptionOffer {
	offers := make([]subscriptionOffer, 0, len(h.offers))
	for _, offer := range h.offers {
		offers = append(offers, offer)
	}
	sort.Slice(offers, func(i, j int) bool {
		if offers[i].PriceMinor == offers[j].PriceMinor {
			return planPriority(offers[i].Role) < planPriority(offers[j].Role)
		}
		return offers[i].PriceMinor < offers[j].PriceMinor
	})
	return offers
}

func (h *Handler) balanceKeyboard() *tgbotapi.InlineKeyboardMarkup {
	rows := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "billing_topup"),
			tgbotapi.NewInlineKeyboardButtonData("üõí –ü–æ–¥–ø–∏—Å–∫–∞", "billing_subscribe"),
		),
	}
	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &markup
}

func (h *Handler) topUpPresetKeyboard() *tgbotapi.InlineKeyboardMarkup {
	if len(defaultTopUpPresets) == 0 {
		return h.balanceKeyboard()
	}
	row := make([]tgbotapi.InlineKeyboardButton, 0, len(defaultTopUpPresets))
	for _, amount := range defaultTopUpPresets {
		label, payload := presetButtonData(amount)
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(label, "billing_topup:"+payload))
	}
	rows := [][]tgbotapi.InlineKeyboardButton{row,
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ë–∞–ª–∞–Ω—Å", "billing_balance"),
		),
	}
	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &markup
}

func (h *Handler) topUpInvoiceKeyboard(link string) *tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton
	if strings.TrimSpace(link) != "" {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üîó –û–ø–ª–∞—Ç–∏—Ç—å", link),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí≥ –ë–∞–ª–∞–Ω—Å", "billing_balance"),
		tgbotapi.NewInlineKeyboardButtonData("üõí –ü–æ–¥–ø–∏—Å–∫–∞", "billing_subscribe"),
	))
	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &markup
}

func (h *Handler) subscriptionKeyboard(user domain.User) *tgbotapi.InlineKeyboardMarkup {
	offers := h.subscriptionOffersOrdered()
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, offer := range offers {
		if planPriority(user.Role) >= planPriority(offer.Role) {
			continue
		}
		label := fmt.Sprintf("%s ‚Äî %s", offer.Title, formatMoney(offer.PriceMinor, "RUB"))
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(label, "plan_buy:"+offer.Key),
		))
	}
	if len(rows) == 0 {
		return nil
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "billing_topup"),
		tgbotapi.NewInlineKeyboardButtonData("üí≥ –ë–∞–ª–∞–Ω—Å", "billing_balance"),
	))
	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &markup
}

func planPriority(role domain.UserRole) int {
	switch role {
	case domain.UserRoleFree:
		return 0
	case domain.UserRolePlus:
		return 1
	case domain.UserRolePro:
		return 2
	case domain.UserRoleDeveloper:
		return 3
	default:
		return -1
	}
}

func formatMoney(amount int64, currency string) string {
	sign := ""
	if amount < 0 {
		sign = "-"
		amount = -amount
	}
	major := amount / 100
	minor := amount % 100
	symbol := currencySymbol(currency)
	return fmt.Sprintf("%s%d.%02d %s", sign, major, minor, symbol)
}

func currencySymbol(currency string) string {
	trimmed := strings.TrimSpace(strings.ToUpper(currency))
	switch trimmed {
	case "RUB", "RUR":
		return "‚ÇΩ"
	case "":
		return "RUB"
	default:
		return trimmed
	}
}

func presetButtonData(amount int64) (label string, payload string) {
	label = formatMoney(amount, "RUB")
	major := amount / 100
	minor := amount % 100
	payload = fmt.Sprintf("%d.%02d", major, minor)
	payload = strings.TrimRight(strings.TrimRight(payload, "0"), ".")
	if payload == "" {
		payload = "0"
	}
	return label, payload
}

func parseAmountToMinor(input string) (int64, error) {
	trimmed := strings.TrimSpace(strings.ReplaceAll(input, ",", "."))
	if trimmed == "" {
		return 0, fmt.Errorf("amount is required")
	}
	if strings.HasPrefix(trimmed, "+") {
		trimmed = strings.TrimPrefix(trimmed, "+")
	}
	if strings.HasPrefix(trimmed, "-") {
		return 0, fmt.Errorf("amount must be positive")
	}
	if strings.HasPrefix(trimmed, ".") {
		trimmed = "0" + trimmed
	}
	parts := strings.SplitN(trimmed, ".", 2)
	majorPart := parts[0]
	if majorPart == "" {
		majorPart = "0"
	}
	major, err := strconv.ParseInt(majorPart, 10, 64)
	if err != nil {
		return 0, err
	}
	if major < 0 {
		return 0, fmt.Errorf("amount must be positive")
	}
	var minor int64
	if len(parts) == 2 {
		frac := parts[1]
		if frac == "" {
			frac = "0"
		}
		if len(frac) > 2 {
			frac = frac[:2]
		}
		for len(frac) < 2 {
			frac += "0"
		}
		parsedMinor, err := strconv.ParseInt(frac, 10, 64)
		if err != nil {
			return 0, err
		}
		minor = parsedMinor
	}
	return major*100 + minor, nil
}

func (h *Handler) handleClearRequest(chatID, tgUserID int64) {
	h.mu.Lock()
	h.pendingDrop[tgUserID] = time.Now()
	h.mu.Unlock()
	h.reply(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /clear_data_confirm –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.", nil)
}

func (h *Handler) handleClearConfirm(ctx context.Context, chatID, tgUserID int64) {
	h.mu.Lock()
	requested, ok := h.pendingDrop[tgUserID]
	if ok && time.Since(requested) > 5*time.Minute {
		delete(h.pendingDrop, tgUserID)
		ok = false
	}
	if ok {
		delete(h.pendingDrop, tgUserID)
	}
	h.mu.Unlock()
	if !ok {
		h.reply(chatID, "–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /clear_data", nil)
		return
	}
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err), nil)
		return
	}
	if err := h.users.DeleteUserData(user.ID); err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: %v", err), nil)
		return
	}
	h.reply(chatID, "–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start", nil)
}

func parseID(data string) int64 {
	parts := strings.Split(data, ":")
	if len(parts) != 2 {
		return 0
	}
	id, _ := strconv.ParseInt(parts[1], 10, 64)
	return id
}

func (h *Handler) reply(chatID int64, text string, keyboard *tgbotapi.InlineKeyboardMarkup) {
	parts := telegram.SplitMessage(text)
	for i, part := range parts {
		msg := tgbotapi.NewMessage(chatID, part)
		if i == 0 && keyboard != nil {
			msg.ReplyMarkup = keyboard
		}
		start := time.Now()
		_, err := h.bot.Send(msg)
		metrics.ObserveNetworkRequest("telegram_bot", "send_message", strconv.FormatInt(chatID, 10), start, err)
		if err != nil {
			h.log.Error().Err(err).Msg("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
			return
		}
	}
}

func (h *Handler) mainKeyboard() *tgbotapi.InlineKeyboardMarkup {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "add_channel"),
			tgbotapi.NewInlineKeyboardButtonData("üìö –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", "my_channels"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì∞ –î–∞–π–¥–∂–µ—Å—Ç", "digest_now"),
			tgbotapi.NewInlineKeyboardButtonData("üìå –î–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–≥–∞–º", "digest_tag_menu"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–æ–≤", "tags_list"),
			tgbotapi.NewInlineKeyboardButtonData("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "set_time"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéØ –ú–æ–π —Ç–∞—Ä–∏—Ñ", "plan_info"),
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã", "referral_info"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ë–∞–ª–∞–Ω—Å", "billing_balance"),
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "billing_topup"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üõí –ü–æ–¥–ø–∏—Å–∫–∞", "billing_subscribe"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help_menu"),
		),
	)
	return &buttons
}

func (h *Handler) mainPlanLines(plan domain.UserPlan) (string, string) {
	channel := "–ö–∞–Ω–∞–ª—ã: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
	if plan.ChannelLimit > 0 {
		channel = fmt.Sprintf("–ö–∞–Ω–∞–ª—ã: –¥–æ %d —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö.", plan.ChannelLimit)
	}
	manual := "–†—É—á–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
	switch {
	case plan.ManualDailyLimit <= 0:
		manual = "–†—É—á–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
	case plan.ManualIntroTotal > 0:
		manual = fmt.Sprintf("–†—É—á–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã: %d –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –¥–æ %d –≤ –¥–µ–Ω—å.", plan.ManualIntroTotal, plan.ManualDailyLimit)
	default:
		manual = fmt.Sprintf("–†—É—á–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã: –¥–æ %d –≤ –¥–µ–Ω—å.", plan.ManualDailyLimit)
	}
	return channel, manual
}

func (h *Handler) buildStartSections(user domain.User) []string {
	plan := user.Plan()
	channelLine, manualLine := h.mainPlanLines(plan)

	intro := []string{
		"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TG Digest Bot!",
		"",
		fmt.Sprintf("–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: %s.", plan.Name),
		"",
		"–û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã:",
		fmt.Sprintf("‚Ä¢ %s", channelLine),
		fmt.Sprintf("‚Ä¢ %s", manualLine),
		"",
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω—É–∂–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.",
	}

	quickStart := []string{
		"üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:",
		"‚Ä¢ ‚ûï –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /add @alias.",
		"‚Ä¢ üè∑ –ù–∞–∑–Ω–∞—á—å—Ç–µ —Ç–µ–≥–∏ –∫–æ–º–∞–Ω–¥–æ–π /tag @alias —Ç–µ–º–∞1, —Ç–µ–º–∞2, —á—Ç–æ–±—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã.",
		"‚Ä¢ üì∞ –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞ 24 —á–∞—Å–∞ –∫–Ω–æ–ø–∫–æ–π ¬´–î–∞–π–¥–∂–µ—Å—Ç¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /digest_now.",
		"‚Ä¢ üìå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —á–µ—Ä–µ–∑ ¬´–î–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–≥–∞–º¬ª –∏–ª–∏ /digest_tag –Ω–æ–≤–æ—Å—Ç–∏.",
		"‚Ä¢ üóì –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–æ–π ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª –∏–ª–∏ /schedule 21:30.",
	}

	var sections []string
	sections = append(sections, strings.Join(intro, "\n"), strings.Join(quickStart, "\n"))

	if referral := h.buildReferralPreview(user); referral != "" {
		sections = append(sections, referral)
	}

	return sections
}

func (h *Handler) buildReferralPreview(user domain.User) string {
	code := strings.TrimSpace(user.ReferralCode)
	if code == "" {
		return ""
	}
	link := h.referralLink(user)
	lines := []string{
		"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:",
		"‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 –¥—Ä—É–∑–µ–π ‚Äî —Ç–∞—Ä–∏—Ñ Plus, 5 ‚Äî Pro.",
		fmt.Sprintf("‚Ä¢ –£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: %d.", user.ReferralsCount),
	}
	if link != "" {
		lines = append(lines, fmt.Sprintf("‚Ä¢ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: %s", link))
	}
	lines = append(lines, "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.")
	return strings.Join(lines, "\n")
}

func (h *Handler) referralLink(user domain.User) string {
	code := strings.TrimSpace(user.ReferralCode)
	if code == "" {
		return ""
	}
	username := strings.TrimSpace(h.bot.Self.UserName)
	if username == "" {
		return ""
	}
	return fmt.Sprintf("https://t.me/%s?start=%s", username, url.QueryEscape(code))
}

func (h *Handler) buildPlanInfoMessage(user domain.User) string {
	plan := user.Plan()
	channelLine, manualLine := h.mainPlanLines(plan)
	lines := []string{
		fmt.Sprintf("üéØ –í–∞—à —Ç–∞—Ä–∏—Ñ: %s", plan.Name),
		"",
		"–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:",
		fmt.Sprintf("‚Ä¢ %s", channelLine),
		fmt.Sprintf("‚Ä¢ %s", manualLine),
	}
	if plan.ManualIntroTotal > 0 {
		lines = append(lines,
			"",
			"–ü–µ—Ä–≤—ã–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ /digest_now.",
		)
	}
	lines = append(lines,
		"",
		"–ù–∞–∂–º–∏—Ç–µ ¬´üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã¬ª, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏.",
	)
	lines = append(lines,
		"",
		"–§–∏–Ω–∞–Ω—Å—ã:",
		"‚Ä¢ /balance ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞.",
		"‚Ä¢ /deposit 500 ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ 500 ‚ÇΩ —á–µ—Ä–µ–∑ –°–ë–ü.",
		"‚Ä¢ /buy plus ‚Äî –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É Plus, /buy pro ‚Äî Pro.",
	)
	return strings.Join(lines, "\n")
}

func (h *Handler) buildReferralInfoMessage(user domain.User) string {
	plusTarget, proTarget := domain.ReferralProgressTargets()
	link := h.referralLink(user)
	lines := []string{
		"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
		"",
		fmt.Sprintf("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: %d.", user.ReferralsCount),
		fmt.Sprintf("‚Ä¢ %d –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ‚Äî —Ç–∞—Ä–∏—Ñ Plus.", plusTarget),
		fmt.Sprintf("‚Ä¢ %d –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ‚Äî —Ç–∞—Ä–∏—Ñ Pro.", proTarget),
	}
	switch {
	case user.ReferralsCount < plusTarget:
		remaining := plusTarget - user.ReferralsCount
		lines = append(lines, "", fmt.Sprintf("–î–æ —Ç–∞—Ä–∏—Ñ–∞ Plus –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å %d.", remaining))
	case user.ReferralsCount < proTarget:
		remaining := proTarget - user.ReferralsCount
		lines = append(lines, "", fmt.Sprintf("–î–æ —Ç–∞—Ä–∏—Ñ–∞ Pro –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å %d.", remaining))
	default:
		lines = append(lines, "", "–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º!")
	}
	if link != "" {
		lines = append(lines, "", fmt.Sprintf("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: %s", link))
	}
	lines = append(lines,
		"",
		"–°—Å—ã–ª–∫–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å–∞–º–∏–º —Å–æ–±–æ–π.",
	)
	return strings.Join(lines, "\n")
}

func (h *Handler) referralKeyboard(user domain.User) *tgbotapi.InlineKeyboardMarkup {
	link := h.referralLink(user)
	if link == "" {
		return nil
	}
	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", link),
		),
	)
	return &markup
}

func (h *Handler) sendPlanInfo(chatID, tgUserID int64) {
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	h.reply(chatID, h.buildPlanInfoMessage(user), nil)
}

func (h *Handler) sendReferralInfo(chatID, tgUserID int64) {
	user, err := h.users.GetByTGID(tgUserID)
	if err != nil {
		h.reply(chatID, fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %v", err), nil)
		return
	}
	h.reply(chatID, h.buildReferralInfoMessage(user), h.referralKeyboard(user))
}

func (h *Handler) notifyPlanUpgrade(user domain.User, previousRole domain.UserRole) {
	plan := user.Plan()
	prevPlan := domain.PlanForRole(previousRole)
	channelLine, manualLine := h.mainPlanLines(plan)
	lines := []string{
		"üéâ –í–∞—à —Ç–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω!",
		fmt.Sprintf("–í—ã –ø–µ—Ä–µ—à–ª–∏ —Å %s –Ω–∞ %s –±–ª–∞–≥–æ–¥–∞—Ä—è %d –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º –¥—Ä—É–∑—å—è–º.", prevPlan.Name, plan.Name, user.ReferralsCount),
		"",
		"–ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:",
		fmt.Sprintf("‚Ä¢ %s", channelLine),
		fmt.Sprintf("‚Ä¢ %s", manualLine),
		"",
		"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º!",
	}
	h.reply(user.TGUserID, strings.Join(lines, "\n"), nil)
}

func (h *Handler) buildHelpMessage() string {
	sections := []string{
		"üìñ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã:",
		"",
		"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:",
		"‚Ä¢ /add @toporlive ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.",
		"‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏.",
		"‚Ä¢ /mute @toporlive ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –¥–∞–π–¥–∂–µ—Å—Ç–∞.",
		"‚Ä¢ /unmute @toporlive ‚Äî –≤–µ—Ä–Ω—É—Ç—å –∫–∞–Ω–∞–ª –≤ –¥–∞–π–¥–∂–µ—Å—Ç.",
		"‚Ä¢ /tag @toporlive –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Äî –∑–∞–¥–∞—Ç—å —Ç–µ–≥–∏.",
		"‚Ä¢ /tags ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç–µ–≥–æ–≤.",
		"",
		"–î–∞–π–¥–∂–µ—Å—Ç—ã:",
		"‚Ä¢ /digest_now ‚Äî —Å–æ–±—Ä–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –∏–∑ –≤—Å–µ—Ö –Ω–µ–º—å—é—Ç–Ω—É—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
		"‚Ä¢ /digest_tag –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å —Ç–µ–≥–æ–º \"–Ω–æ–≤–æ—Å—Ç–∏\".",
		"",
		"–ë–∏–ª–ª–∏–Ω–≥:",
		"‚Ä¢ /balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞.",
		"‚Ä¢ /deposit 500 ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –°–ë–ü.",
		"‚Ä¢ /buy plus ‚Äî –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É Plus (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /buy pro).",
		"",
		"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ:",
		"‚Ä¢ /schedule ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏.",
		"‚Ä¢ /schedule 21:30 ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
		"‚Ä¢ /clear_data ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
		"",
		"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω—É–∂–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.",
	}
	return strings.Join(sections, "\n")
}

func (h *Handler) buildTagDigestHint() string {
	lines := []string{
		"üìå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–≥–∞–º:",
		"1. –ó–∞–¥–∞–π—Ç–µ —Ç–µ–≥–∏ –∫–∞–Ω–∞–ª—É: /tag @toporlive –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
		"2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É \"üè∑ –¢–µ–≥–∏ –∫–∞–Ω–∞–ª–æ–≤\" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /tags.",
		"3. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É: /digest_tag –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
		"",
		"–°–æ–≤–µ—Ç: —Ç–µ–≥–∏ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É, –Ω–æ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å –∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ, —á—Ç–æ–±—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–µ–º–∞–º.",
	}
	return strings.Join(lines, "\n")
}

// SchedulePresetKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
func SchedulePresetKeyboard() *tgbotapi.InlineKeyboardMarkup {
	rows := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("07:30", "set_time:07:30"),
			tgbotapi.NewInlineKeyboardButtonData("09:00", "set_time:09:00"),
			tgbotapi.NewInlineKeyboardButtonData("12:00", "set_time:12:00"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("18:00", "set_time:18:00"),
			tgbotapi.NewInlineKeyboardButtonData("19:00", "set_time:19:00"),
			tgbotapi.NewInlineKeyboardButtonData("21:00", "set_time:21:00"),
		),
	}
	markup := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return &markup
}

// ParseLocalTime –ø–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú.
func ParseLocalTime(input string) (time.Time, error) {
	return time.Parse("15:04", strings.TrimSpace(input))
}

type subscriptionOffer struct {
	Key        string
	Role       domain.UserRole
	Title      string
	PriceMinor int64
	Duration   string
	Bullets    []string
}

var defaultTopUpPresets = []int64{30000, 50000, 100000}

func defaultSubscriptionOffers() map[string]subscriptionOffer {
	return map[string]subscriptionOffer{
		"plus": {
			Key:        "plus",
			Role:       domain.UserRolePlus,
			Title:      "Plus",
			PriceMinor: 29900,
			Duration:   "1 –º–µ—Å—è—Ü",
			Bullets: []string{
				"–î–æ 10 –∫–∞–Ω–∞–ª–æ–≤",
				"–î–æ 3 —Ä—É—á–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å",
			},
		},
		"pro": {
			Key:        "pro",
			Role:       domain.UserRolePro,
			Title:      "Pro",
			PriceMinor: 49900,
			Duration:   "1 –º–µ—Å—è—Ü",
			Bullets: []string{
				"–î–æ 15 –∫–∞–Ω–∞–ª–æ–≤",
				"–î–æ 6 —Ä—É—á–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å",
			},
		},
	}
}
